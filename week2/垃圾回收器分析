1.串行收集器
启用方式：-XX：+ UseSerialGC
		新生代：Serial  算法：复制算法
		老年代：Serial Old 算法：标记整理算法
用处：单线程环境（例如32位或Windows）和以及用于比较小的堆。
优点：简单高效
缺点：工作的时候会冻结其他所有程序的线程。

2.并行收集器
启用方式：-XX:+UseParallelGC   jvm默认收集器（jdk1.8以前）
		新生代：Parallel Scavenge  算法：复制算法
		老年代：Parallel Old 算法：标记整理算法
用处：在后台运算而不需要太多交互的任务。
优点：追求高吞吐量，高效利用 CPU
缺点：需要对暂停时间没有要求，在多线程小收集过程中，由于年轻代到永久代的晋升，可能会产生一些碎片。
	  单线程效率没有串行收集器效率高。

3.cms
启用方式：-XX:+UseConcMarkSweepGC
		新生代：ParNew  算法：复制算法
		老年代：CMS 和Serial Old 算法：标记-清除算法 和标记整理算法
用处：集中在互联网站或B/S系统服务端上的Java应用
优点：并发，低停顿
缺点：对CPU资源非常敏感：会占用一部分线程
	  无法清理并发清理过程中用户线程产生的垃圾，只有下一次gc会清理
	  CMS使用“标记-清理”法会产生大量的空间碎片

4.G1
启用方式：-XX：+ UseG1GC
		新生代,老年代：Serial  算法：标记-整理+复制算法
用处：面向服务端应用，将来替换CMS
优点：并行和并发相结合
	  运作期间不会产生内存空间碎片
	  分代收集
缺点：G1需要记忆集(卡表)来记录新生代和老年代之间的引用关系，这种数据结构在 G1 中需要占用大量的内存
